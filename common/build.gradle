buildscript {
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-serialization:1.3.40"
    }
}

plugins {
    id 'kotlin-multiplatform' version '1.3.40'
    id 'kotlinx-serialization' version '1.3.40'
}

repositories {
    mavenCentral()
}

def ktor_version = "1.2.2"
def kotlin_serialization = "0.11.1"
def klockVersion = "1.5.0"

kotlin {
    jvm()
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosArm64("iosArm64") {
        binaries {
            framework()
        }
    }
    iosX64("iosX64") {
        binaries {
            framework()
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation("io.ktor:ktor-client-core:$ktor_version")
                implementation("io.ktor:ktor-client-logging:$ktor_version")
                implementation("io.ktor:ktor-client-json:$ktor_version")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlin_serialization")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlin_serialization")
                implementation "com.soywiz.korlibs.klock:klock:$klockVersion"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation("io.ktor:ktor-client-android:$ktor_version")
                implementation("io.ktor:ktor-client-json-jvm:$ktor_version")
                implementation("io.ktor:ktor-client-logging-jvm:$ktor_version")
                api "com.soywiz.korlibs.klock:klock-jvm:$klockVersion"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
                implementation("io.ktor:ktor-client-ios:$ktor_version")
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlin_serialization"
            }
        }
        iosArm64 {
            dependencies {
                implementation "com.soywiz.korlibs.klock:klock-iosarm64:$klockVersion"
            }
        }
        iosX64 {
            dependencies {
                implementation "com.soywiz.korlibs.klock:klock-iosx64:$klockVersion"
            }
        }
        iosTest {
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'common.framework/**'
            include 'common.framework.dSYM'
        }
    }
}