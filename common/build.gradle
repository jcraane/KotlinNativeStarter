import nl.jamiecraane.buildscript.Localize
import nl.jamiecraane.buildscript.MoveLocalizedFiles
import org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask

buildscript {
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-serialization:1.3.50"
    }
}

plugins {
    id 'kotlin-multiplatform'
    id "com.android.library"
    id 'kotlinx-serialization' version '1.3.50'
}

repositories {
    mavenCentral()
}

def ktor_version = "1.2.4"
def kotlin_serialization = "0.12.0"
def klockVersion = "1.6.2"

//def rootTarget = project.findProperty('kotlin.target') ?: 'x86_64'
// armv7 (device 32-bit) arm64 (device 64-bit) x86_64 (simulator 64-bit)
//def rootTarget = '__x86_64'
//println("TARGET IN ROOT = $rootTarget")

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

def frameworkName = "common"
kotlin {
    android()

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation("io.ktor:ktor-client-core:$ktor_version")
                implementation("io.ktor:ktor-client-logging:$ktor_version")
                implementation("io.ktor:ktor-client-json:$ktor_version")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlin_serialization")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlin_serialization")
                implementation "com.soywiz.korlibs.klock:klock:$klockVersion"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation("io.ktor:ktor-client-android:$ktor_version")
                implementation("io.ktor:ktor-client-json-jvm:$ktor_version")
                implementation("io.ktor:ktor-client-logging-jvm:$ktor_version")
                api "com.soywiz.korlibs.klock:klock-jvm:$klockVersion"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
                implementation("io.ktor:ktor-client-ios:$ktor_version")
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlin_serialization"
            }
        }
        iosArm32 {
            dependencies {
                implementation "com.soywiz.korlibs.klock:klock-iosarm32:$klockVersion"
            }
        }
        iosArm64 {
            dependencies {
                implementation "com.soywiz.korlibs.klock:klock-iosarm64:$klockVersion"
            }
        }
        iosX64 {
            dependencies {
                implementation "com.soywiz.korlibs.klock:klock-iosx64:$klockVersion"
            }
        }
        iosTest {
        }
    }

    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    /*if (rootTarget == "x86_64") {
        iosX64("ios") {
            binaries {
                framework()
            }
        }
    } else {


    }*/

    iosArm32("ios32")
    iosArm64("ios64")
    iosX64("ios")

    targets {
        configure([ios32, ios64, ios]) {
            binaries.framework {
                baseName  = frameworkName
                embedBitcode "bitcode"
            }
        }
    }

    tasks.create("debugFatFramework", FatFrameworkTask.class) {
        println("DEBUG FAT FRAMEWORK")
        baseName = frameworkName
        from(
                targets.ios32.binaries.getFramework("DEBUG"),
                targets.ios64.binaries.getFramework("DEBUG"),
                targets.ios.binaries.getFramework("DEBUG")
        )

        destinationDir  new File(buildDir, "fat-framework/debug")
        group = "Universal framework"
        description = "Builds a universal (fat) debug framework"
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
/*task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
//    def target = project.findProperty('kotlin.target') ?: 'ios'
//    def target = 'ios'
    def target = 'ios32'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'common.framework/**'
            include 'common.framework.dSYM'
        }
    }
}*/

def localizationProjectFolder = "localization"
def pathToLocalizeProject = new File(gradle.rootProject.projectDir, localizationProjectFolder)
def projectSourceFolder = new File(projectDir, "src")
def outputDir = new File(projectDir, "generated")

task localize(type: Localize) {
    inputs.dir(pathToLocalizeProject)
    outputs.dir(outputDir)
    outputFolder = outputDir
    repoLocation = pathToLocalizeProject
}

task moveLocalizeFiles(type: MoveLocalizedFiles) {
    output = outputDir
    source = projectSourceFolder
    dependsOn(localize)
}

task cleanGenerated {
    doLast {
        outputDir.delete()
    }
}

preBuild {
    dependsOn(moveLocalizeFiles)
}

clean {
    dependsOn(cleanGenerated)
}
